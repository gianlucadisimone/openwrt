--- a/drivers/spi/spi-rt2880.c
+++ b/drivers/spi/spi-rt2880.c
@@ -93,6 +93,7 @@ struct rt2880_spi_ops {
 	int (*baudrate_set)(struct spi_device *spi, unsigned int speed);
 	unsigned int (*write_read)(struct spi_device *spi, struct list_head *list, struct spi_transfer *xfer);
 	int num_cs;
+	u16 flags;
 };
 
 struct rt2880_spi {
@@ -343,9 +344,7 @@ rt2880_spi_write_read(struct spi_device
 				goto out;
 			}
 		}
-	}
-
-	if (rx) {
+	} else if (rx) {
 		for (count = 0; count < xfer->len; count++) {
 			rt2880_spi_setbits(rs, RAMIPS_SPI_CTL(cs), SPICTL_STARTRD);
 			err = rt2880_spi_wait_till_ready(spi);
@@ -478,6 +477,13 @@ static int rt2880_spi_transfer_one_messa
 			goto msg_done;
 		}
 
+		if (t->tx_buf != NULL && t->rx_buf != NULL && t->len) {
+			dev_err(&spi->dev,
+				"message rejected: full-duplex not supported\n");
+			status = -EIO;
+			goto msg_done;
+		}
+
 		if (t->speed_hz && t->speed_hz < (rs->sys_freq / 128)) {
 			dev_err(&spi->dev,
 				"message rejected: device min speed (%d Hz) exceeds required transfer speed (%d Hz)\n",
@@ -583,18 +589,21 @@ static struct rt2880_spi_ops spi_ops[] =
 		.baudrate_set = rt2880_spi_baudrate_set,
 		.write_read = rt2880_spi_write_read,
 		.num_cs = 1,
+		.flags = SPI_MASTER_HALF_DUPLEX,
 	}, {
 		.init_hw = rt5350_spi_reset,
 		.set_cs = rt2880_spi_set_cs,
 		.baudrate_set = rt2880_spi_baudrate_set,
 		.write_read = rt2880_spi_write_read,
 		.num_cs = 2,
+		.flags = SPI_MASTER_HALF_DUPLEX,
 	}, {
 		.init_hw = mt7621_spi_reset,
 		.set_cs = mt7621_spi_set_cs,
 		.baudrate_set = mt7621_spi_baudrate_set,
 		.write_read = mt7621_spi_write_read,
 		.num_cs = 1,
+		.flags = 0,
 	},
 };
 
@@ -652,6 +661,7 @@ static int rt2880_spi_probe(struct platf
 	master->bits_per_word_mask = SPI_BPW_MASK(8);
 	master->dev.of_node = pdev->dev.of_node;
 	master->num_chipselect = ops->num_cs;
+	master->flags = ops->flags;
 
 	dev_set_drvdata(&pdev->dev, master);
 
